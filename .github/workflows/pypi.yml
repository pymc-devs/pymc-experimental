name: PyPI
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    name: build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build the sdist and the wheel
        run: |
          pip install build
          python3 -m build
      - name: Check the sdist installs and imports
        run: |
            mkdir -p test-sdist
            cd test-sdist
            python -m venv venv-sdist
            venv-sdist/bin/python -m pip install numpy
            venv-sdist/bin/python -m pip install ../dist/pymc_experimental*.tar.gz
            echo "Checking import and version number (on release)"
            venv-sdist/bin/python -c "import pymc_experimental as pmx; assert pmx.__version__ == '${{ github.ref_name }}'[1:] if '${{ github.ref_type }}' == 'tag' else True; print(pmx.__version__)"
            cd ..
      - name: Check the bdist installs and imports
        run: |
              mkdir -p test-bdist
              cd test-bdist
              python -m venv venv-bdist
              venv-bdist/bin/python -m pip install ../dist/pymc_experimental*.whl
              echo "Checking import and version number (on release)"
              venv-bdist/bin/python -c "import pymc_experimental as pmx; assert pmx.__version__ == '${{ github.ref_name }}'[1:] if '${{ github.ref_type }}' == 'tag' else pmx.__version__; print(pmx.__version__)"
              cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: dist/*
  test:
    name: upload to test PyPI
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Test pip install from test.pypi
        run: |
          python -m venv venv-test-pypi
          venv-test-pypi/bin/python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple pymc-experimental
          echo "Checking import and version number"
          venv-test-pypi/bin/python -c "import pymc_experimental; assert pymc_experimental.__version__ == '${{ github.ref_name }}'[1:]"

  publish:
    name: upload release to PyPI
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
