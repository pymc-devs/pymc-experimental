[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pymc_experimental"
authors = [
  {name = "PyMC Developers", email = "pymc.devs@gmail.com"},
]
description = "A home for new additions to PyMC, which may include unusual probability distributions, advanced model fitting algorithms, or any code that may be inappropriate to include in the pymc repository, but may want to be made available to users."
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Operating System :: OS Independent",
]
readme = "README.md"
requires-python = ">=3.10"
keywords = [
  "probability",
  "machine learning",
  "statistics",
  "mcmc",
  "sampling",
  "bayesian",
]
license = {file = "LICENSE"}
dynamic = ["version"]  # specify the version in the __init__.py file
dependencies = [
  "pymc>=5.16.1",
  "scikit-learn",
]

[project.optional-dependencies]
dev = [
  "pytest>=6.0",
  "dask[all]",
  "blackjax>1.0.0",
  "statsmodels",
]
docs = [
  "nbsphinx>=0.4.2",
  "pydata-sphinx-theme>=0.6.3",
  "sphinx>=4.0",
  "pymc-sphinx-theme@git+https://github.com/pymc-devs/pymc-sphinx-theme",
]

[project.urls]
Documentation = "https://www.pymc.io/projects/experimental/"
Repository = "https://github.com/pymc-devs/pymc-experimental.git"
Issues = "https://github.com/pymc-devs/pymc-experimental/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["pymc_experimental"]
exclude = ["tests", "notebooks"]
# Additional install requirements for running tests
namespaces = false

[tool.setuptools.dynamic]
version = {attr = "pymc_experimental.__version__"}

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
addopts = [
  "-v",
  "--doctest-modules",
  "--ignore=pymc_experimental/model_builder.py"
]

filterwarnings =[
  "error",
  # Raised by arviz when the model_builder class adds non-standard group names to InferenceData
  "ignore::UserWarning:arviz.data.inference_data",

  # bool8, find_common_type, cumproduct, and product had deprecation warnings added in numpy 1.25
  'ignore:.*(\b(pkg_resources\.declare_namespace|np\.bool8|np\.find_common_type|cumproduct|product)\b).*:DeprecationWarning',

  # JAX issues an over-eager warning if os.fork() is called when the JAX module is loaded, even if JAX isn't being used
  'ignore:os\.fork\(\) was called\.:RuntimeWarning',

  # Warning coming from blackjax
  'ignore:jax\.tree_map is deprecated:DeprecationWarning',
]

[tool.coverage.report]
exclude_lines = [
  "pragma: nocover",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["D", "E", "F", "I", "UP", "W", "RUF"]
ignore = [
  "E501",
  "RUF001", # String contains ambiguous character (such as Greek letters)
  "RUF002", # Docstring contains ambiguous character (such as Greek letters)
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "D200",
  "D202",
  "D203",
  "D204",
  "D205",
  "D209",
  "D212",
  "D213",
  "D301",
  "D400",
  "D401",
  "D403",
  "D413",
  "D415",
  "D417",
]

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.ruff.lint.per-file-ignores]
'tests/*.py' = [
  'F841', # Unused variable warning for test files -- common in pymc model declarations
  'D106'  # Missing docstring for public method -- unittest test subclasses don't need docstrings
]
'tests/statespace/*.py' =  [
  'F401', # Unused import warning for test files -- this check removes imports of fixtures
  'F811'  # Redefine while unused -- this check fails on imported fixtures
]
